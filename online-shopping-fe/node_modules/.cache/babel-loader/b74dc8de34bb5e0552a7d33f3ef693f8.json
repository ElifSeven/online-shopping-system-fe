{"ast":null,"code":"import _objectSpread from \"/Users/elifseven/Desktop/web_app_project/online-shopping-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/elifseven/Desktop/web_app_project/online-shopping-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/elifseven/Desktop/web_app_project/online-shopping-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/elifseven/Desktop/web_app_project/online-shopping-fe/src/Components/ProductList/ProductList.js\";\nimport React, { Component } from \"react\";\nimport Item from \"../Item/Item\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport queryString from \"query-string\";\nimport Api from \"../../Api\";\nimport Paging from \"../Paging/Paging\";\nimport ProductsHeader from \"../ProductsHeader/ProductsHeader\"; // This component is responsible for fetching products. It determines from query string which products to fetch.\n// The URL is checked on initial mount and when URL changes.\n\nclass ProductList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      totalItemsCount: null,\n      items: []\n    };\n    this.updateQueryString = this.updateQueryString.bind(this);\n  }\n\n  fetchData() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var qsAsObject, results;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.setState({\n              loading: true\n            }); // Parse the query string\n\n\n            qsAsObject = queryString.parse(_this.props.location.search);\n            _context.next = 4;\n            return Api.searchItems(qsAsObject);\n\n          case 4:\n            results = _context.sent;\n\n            _this.setState({\n              items: results.data,\n              loading: false,\n              totalItemsCount: results.totalLength\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  updateQueryString(newValues) {\n    let currentQS = queryString.parse(this.props.location.search);\n\n    let newQS = _objectSpread({}, currentQS, {}, newValues);\n\n    this.props.history.push(\"/?\" + queryString.stringify(newQS));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let currentQS = queryString.parse(this.props.location.search);\n    let oldQS = queryString.parse(prevProps.location.search);\n\n    let areSameObjects = (a, b) => {\n      if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n      for (let key in a) {\n        if (a[key] !== b[key]) return false;\n      }\n\n      return true;\n    }; // We will refetch products only when query string changes.\n\n\n    if (!areSameObjects(currentQS, oldQS)) {\n      this.fetchData();\n    }\n  }\n\n  render() {\n    let parsedQS = queryString.parse(this.props.location.search);\n\n    if (this.state.loading) {\n      return React.createElement(CircularProgress, {\n        className: \"circular\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        color: \"#pink\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(ProductsHeader, {\n      parsedQS: parsedQS,\n      updateQueryString: this.updateQueryString,\n      totalItemsCount: this.state.totalItemsCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.items.map(item => {\n      return React.createElement(Item, {\n        key: item.id,\n        item: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    })), React.createElement(Paging, {\n      parsedQS: parsedQS,\n      updateQueryString: this.updateQueryString,\n      totalItemsCount: this.state.totalItemsCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/elifseven/Desktop/web_app_project/online-shopping-fe/src/Components/ProductList/ProductList.js"],"names":["React","Component","Item","CircularProgress","queryString","Api","Paging","ProductsHeader","ProductList","constructor","props","state","loading","totalItemsCount","items","updateQueryString","bind","fetchData","setState","qsAsObject","parse","location","search","searchItems","results","data","totalLength","componentDidMount","newValues","currentQS","newQS","history","push","stringify","componentDidUpdate","prevProps","prevState","snapshot","oldQS","areSameObjects","a","b","Object","keys","length","key","render","parsedQS","height","display","flexDirection","color","flex","map","item","id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Item from \"../Item/Item\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport queryString from \"query-string\";\nimport Api from \"../../Api\";\nimport Paging from \"../Paging/Paging\";\nimport ProductsHeader from \"../ProductsHeader/ProductsHeader\"\n\n\n// This component is responsible for fetching products. It determines from query string which products to fetch.\n// The URL is checked on initial mount and when URL changes.\nclass ProductList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      totalItemsCount: null,\n      items: []\n    };\n    this.updateQueryString = this.updateQueryString.bind(this);\n\n  }\n\n  async fetchData() {\n\n    this.setState({ loading: true });\n\n    // Parse the query string\n    let qsAsObject = queryString.parse(this.props.location.search);\n\n    let results = await Api.searchItems(qsAsObject);\n\n    this.setState({\n      items: results.data,\n      loading: false,\n      totalItemsCount: results.totalLength\n    });\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  updateQueryString(newValues) {\n    let currentQS = queryString.parse(this.props.location.search);\n    let newQS = { ...currentQS, ...newValues };\n    this.props.history.push(\"/?\" + queryString.stringify(newQS));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    let currentQS = queryString.parse(this.props.location.search);\n    let oldQS = queryString.parse(prevProps.location.search);\n    \n    let areSameObjects = (a, b) => {\n      if (Object.keys(a).length !== Object.keys(b).length) return false;\n      for (let key in a) {\n              if (a[key] !== b[key]) return false;\n      }\n      return true;\n    }\n\n    // We will refetch products only when query string changes.\n    if (!areSameObjects(currentQS,oldQS )) {\n      this.fetchData();\n    }\n  }\n\n  render() {\n    let parsedQS = queryString.parse(this.props.location.search);\n\n    if (this.state.loading) {\n      return (\n        <CircularProgress className=\"circular\" />\n      );\n    }\n\n    return (\n      <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" , color:\"#pink\"}}>\n        <ProductsHeader\n          parsedQS={parsedQS}\n          updateQueryString={this.updateQueryString}\n          totalItemsCount={this.state.totalItemsCount} />\n\n        <div style={{ flex: 1 }}>\n          {this.state.items.map(item => {\n            return <Item key={item.id} item={item} />;\n          })}\n        </div>\n\n        <Paging\n          parsedQS={parsedQS}\n          updateQueryString={this.updateQueryString}\n          totalItemsCount={this.state.totalItemsCount}\n        />\n      </div >\n    );\n  }\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}